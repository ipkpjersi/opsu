apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

import org.apache.tools.ant.filters.*

group = 'itdelatrisu'
version = '0.16.1'

mainClassName = 'itdelatrisu.opsu.Opsu'
buildDir = new File(rootProject.projectDir, "build/")

def useXDG = 'false'
if (hasProperty('XDG')) {
	useXDG = XDG
}

def excludeFFmpeg = false
if (hasProperty('excludeFFmpeg')) {
	excludeFFmpeg = true
}

sourceCompatibility = 17
targetCompatibility = 17

sourceSets {
	main {
		java {
			srcDir 'src'
		}
	}
}

repositories {
	mavenCentral()
	maven {
		url "$rootProject.projectDir/repo"
	}
}

dependencies {
	implementation('org.lwjgl.lwjgl:lwjgl:2.9.3') {
		exclude group: 'net.java.jinput', module: 'jinput'
	}
	implementation('org.slick2d:slick2d-core:1.0.2') {
		exclude group: 'org.lwjgl.lwjgl', module: 'lwjgl'
		exclude group: 'org.jcraft', module: 'jorbis'
		exclude group: 'javax.jnlp', module: 'jnlp-api'
	}
	implementation 'net.lingala.zip4j:zip4j:1.3.2'
	implementation 'com.googlecode.soundlibs:jlayer:1.0.1.4'
	implementation('com.googlecode.soundlibs:mp3spi:1.9.5.4') {
		exclude group: 'com.googlecode.soundlibs', module: 'tritonus-share'
	}
	implementation 'com.googlecode.soundlibs:tritonus-all:0.3.7.2'
	implementation 'org.xerial:sqlite-jdbc:3.15.1'
	implementation 'org.json:json:20160810'
	implementation 'net.java.dev.jna:jna:4.2.2'
	implementation 'net.java.dev.jna:jna-platform:4.2.2'
	implementation 'org.apache.maven:maven-artifact:3.3.3'
	implementation 'org.tukaani:xz:1.6'
	implementation 'net.indiespot:media:0.8.9'
}

def nativePlatforms = ['windows', 'linux', 'osx', 'all']
nativePlatforms.each { platform -> //noinspection GroovyAssignabilityCheck
	task "${platform}Natives" {
		def outputDir = "${buildDir}/natives/"
		inputs.files(configurations.runtimeClasspath)
		outputs.dir(outputDir)
		doLast {
			copy {
				def artifacts = configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts
						.findAll { it.classifier == "natives-$platform" }
				artifacts.each {
					from zipTree(it.file)
				}
				into outputDir
			}
		}
	}
}

processResources {
	from 'res'
	exclude '**/Thumbs.db'

	filesMatching('version') {
		expand(version: project.version, timestamp: new Date().format("yyyy-MM-dd HH:mm"))
	}
}

task unpackNatives {
	description "Copies native libraries to the build directory."
	dependsOn nativePlatforms.collect { "${it}Natives" }.findAll { tasks[it] }
}

jar {
	manifest {
		attributes 'Implementation-Title': 'opsu!',
				'Implementation-Version': version,
				'Main-Class': mainClassName,
				'Use-XDG': useXDG
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	baseName = "opsu"

	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude '**/Thumbs.db'
	if (excludeFFmpeg)
		exclude 'ffmpeg*'

	outputs.upToDateWhen { false }
}

run {
	dependsOn 'unpackNatives'
}
